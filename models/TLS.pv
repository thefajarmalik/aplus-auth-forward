(* ===== DATA TYPES ===== *)

type Id_t.        
type Random_t.    (* Nonce *)
type e_t.         (* DH exponent *)
type G_t.         (* DH group *)
type K_t.         (* Symmetric key *)
type PK_t.        (* Public key *)
type SK_t.        (* Private key *)
type MAC_t.       (* MAC *)
type Sig_t.       (* Signature *)
type Cert_t.      (* Certificate *)
type Tag_t.       (* Message type tag *)

(* ===== CHANNELS ===== *)

(* Public channel *)
free c:channel.

(* ===== TABLES ===== *)

(* ===== CONSTANTS ===== *) 

(* DH generator *)
const G:G_t.

(* TLS key constants *)
const CHTS:bitstring.
const SHTS:bitstring.
(* TLS key constants *)
const CATS:bitstring.
const SATS:bitstring.
(* Handshake Type *)
const CERTIFICATE:bitstring.
const CERTIFICATE_VERIFY:bitstring.
const FINISHED:bitstring.
const ZERO: K_t.
const DERIVED: bitstring.

(* ===== FUNCTIONS ===== *)

(* Generate a public key from a private key *)
fun make_pk(SK_t): PK_t.

(* Sign a certificate with a private key *)
fun signcert(Id_t,PK_t,SK_t): Cert_t.

(* Verify a certificate with a public key *)
reduc forall id:Id_t,pk:PK_t,sk:SK_t;
  checkcert(signcert(id,pk,sk),make_pk(sk)) = (id,pk)
.

(* Read contents of certificate without verifying *)
reduc forall id:Id_t,pk:PK_t,sk:SK_t;
  readcert(signcert(id,pk,sk)) = (id,pk)
.

(* Create a self-signed certificate *)
letfun selfsigned_certificate(id:Id_t,sk:SK_t) =
  signcert(id,make_pk(sk),sk)
.

(* Sign a bitstring with a private key *)
fun sign(bitstring,SK_t): Sig_t.
reduc forall bs:bitstring, sk:SK_t;
  checksign(sign(bs,sk),make_pk(sk)) = bs
.

(* Authenticated encryption/decryption *)
fun enc(bitstring,K_t): bitstring.
reduc forall k:K_t, m:bitstring;
  dec(enc(m,k),k) = m
.

(* Diffie-Hellman key exchange *)
fun DH(e_t,G_t): G_t.
equation forall x:e_t, y:e_t;
  DH(y,DH(x,G)) = DH(x,DH(y,G))
.

(* MAC *)
fun mac(bitstring,K_t): MAC_t.

(* Hash *)
fun hash(bitstring): bitstring.

(* KDF *)
fun hkdf_extract(G_t,K_t): K_t.
fun hkdf_expand_label(K_t,bitstring): K_t.
fun derive_secret(K_t,bitstring,bitstring): K_t.

fun toG(bitstring): G_t [typeConverter].
fun toBS(G_t): bitstring [typeConverter].


(* ===== EVENTS ===== *)

event ServerFinished(Id_t,Cert_t,K_t).
event ClientFinished(Id_t,Cert_t,K_t).
event ServerComplete(Id_t,Cert_t,K_t).

(* ===== QUERIES ===== *)

(* Authentication of server to client *)
query domain:Id_t, cert:Cert_t, ms:K_t; event(ClientFinished(domain, cert, ms)) ==> inj-event(ServerFinished(domain, cert, ms)).
(* Authentication of client to server *)
query domain:Id_t, cert:Cert_t, ms:K_t; event(ServerComplete(domain, cert, ms)) ==> event(ClientFinished(domain, cert, ms)).

(* Reachability *)
query domain:Id_t, cert:Cert_t, ms:K_t; event(ClientFinished(domain, cert, ms)).
query domain:Id_t, cert:Cert_t, ms:K_t; event(ServerFinished(domain, cert, ms)).
query domain:Id_t, cert:Cert_t, ms:K_t; event(ServerComplete(domain, cert, ms)).

(* ===== PROCESSES ===== *)
let client(ca_pk:PK_t) = 
    (* Client hello *)
    new chr:Random_t;
    new x:e_t;
    let client_hello = (chr, DH(x, G)) in
    out(c, client_hello);
    (* Server hello *)
    in(c, server_hello:bitstring);
    let (shr:Random_t, dhs:G_t) = server_hello in
    (* Key derivation *)
    let handshake_secret = hkdf_extract(DH(x, dhs), derive_secret(ZERO, DERIVED, ())) in
    let shts = derive_secret(handshake_secret, SHTS, (client_hello, server_hello)) in
    let chts = derive_secret(handshake_secret, CHTS, (client_hello, server_hello)) in
    let master_secret = derive_secret(handshake_secret, DERIVED, ()) in
    let sfk = hkdf_expand_label(shts, FINISHED) in
    let cfk = hkdf_expand_label(chts, FINISHED) in
    (* Server certificate *)
    in(c, server_certificate:bitstring);
    let(=CERTIFICATE, server_cert:Cert_t) = dec(server_certificate, shts) in 
    let(server_id:Id_t, spk:PK_t) = checkcert(server_cert, ca_pk) in
    (* Verify transcript hash *)
    in(c, server_certificate_verify:bitstring);
    let (=CERTIFICATE_VERIFY, cv:Sig_t) = dec(server_certificate_verify, shts) in   
    let transcript_hash = checksign(cv, spk) in
    if transcript_hash = hash((client_hello, server_hello, server_certificate)) then
    (* Verify server finished *)
    in(c, server_finished:bitstring);
    let (=FINISHED, server_finished_mac:MAC_t) = dec(server_finished, shts) in
    if server_finished_mac = mac(hash((client_hello, server_hello, server_certificate, server_certificate_verify)), sfk) then
    event ClientFinished(server_id, server_cert, master_secret);
    (* Send client finished *)
    let client_finished = mac(hash((client_hello, server_hello, server_certificate, server_certificate_verify, server_finished)), cfk) in
    out(c, enc((FINISHED, client_finished), chts));
    (* Application Traffic *)
    let sats = derive_secret(handshake_secret, SATS, (client_hello, server_hello, server_certificate, server_certificate_verify, server_finished)) in
    let cats = derive_secret(handshake_secret, CATS, (client_hello, server_hello, server_certificate, server_certificate_verify, server_finished)) in
    
    0.


let server(sk:SK_t, server_cert:Cert_t, server_id:Id_t) = 
    (* TLS start *)
    in(c, client_hello:bitstring);
    let (chr:Random_t, dhc:G_t) = client_hello in
    new shr:Random_t;
    new y:e_t;
    (* Server hello *)
    let server_hello = (shr, DH(y, G)) in
    out(c, server_hello);
    (* Key derivation *)
    let handshake_secret = hkdf_extract(DH(y, dhc), derive_secret(ZERO, DERIVED, ())) in
    let shts = derive_secret(handshake_secret, SHTS, (client_hello, server_hello)) in
    let chts = derive_secret(handshake_secret, CHTS, (client_hello, server_hello)) in
    let master_secret = derive_secret(handshake_secret, DERIVED, ()) in
    let sfk = hkdf_expand_label(shts, FINISHED) in
    let cfk = hkdf_expand_label(chts, FINISHED) in
    (* Server certificate *)
    let server_certificate = enc((CERTIFICATE, server_cert), shts) in
    out(c, server_certificate);
    (* CertificateVerify *)
    let transcript_hash = hash((client_hello, server_hello, server_certificate)) in 
    let server_certificate_verify = enc((CERTIFICATE_VERIFY, sign(transcript_hash, sk)), shts) in 
    out(c, server_certificate_verify);
    (* Server finished *)
    event ServerFinished(server_id, server_cert, master_secret);
    let server_finished = enc((FINISHED,mac(hash((client_hello, server_hello, server_certificate, server_certificate_verify)), sfk)), shts) in
    out(c, server_finished);
    (* Client finished *)
    in(c, client_finished: bitstring);
    let (=FINISHED, client_finished_mac:MAC_t) = dec(client_finished, chts) in 
    let (=client_finished_mac) = mac(hash((client_hello, server_hello, server_certificate, server_certificate_verify, server_finished)), cfk) in
    event ServerComplete(server_id, server_cert, master_secret);
    (* Application Traffic *)
    let sats = derive_secret(handshake_secret, SATS, (client_hello, server_hello, server_certificate, server_certificate_verify, server_finished)) in
    let cats = derive_secret(handshake_secret, CATS, (client_hello, server_hello, server_certificate, server_certificate_verify, server_finished)) in
    
    0.

process 
    (* CA *)
    new ca_sk:SK_t; let ca_pk = make_pk(ca_sk) in out(c, ca_pk);

    (* Server certificate *)
    new server_id:Id_t;
    new server_sk:SK_t; let server_pk = make_pk(server_sk) in
    let server_cert = signcert(server_id, server_pk, ca_sk) in out(c, server_cert);

    !server(server_sk, server_cert, server_id) | !client(ca_pk)

